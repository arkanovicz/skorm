package $package

import com.republicate.skorm.bagAttribute
import com.republicate.skorm.instanceAttribute

#set ($databaseClass = "#pascal($database.name)Database")

// join attributes declaration for client
fun ${databaseClass}.initJoins() {
#foreach ($schema in $database.schemas.values())
  #set($schemaClass = "${databaseClass}.#pascal($schema.name)Schema")
  #set($schemaInstance = "#camel($schema.name)")
  #foreach ($table in $schema.tables.values())
    #if($kotlin.isJoinTable($table))
    #else
      #foreach($fk in $table.foreignKeys)
        #set($instanceClass = "${schemaClass}.#pascal($fk.towards.name)")
        #if($fk.fields.size() == 1)
          #set($attrName = "#attributeName($fk.fields.iterator().next().name)")
        #elseif($kotlin.isUniqueFkDest($fk))
          #set($attrName = "#camel($fk.towards.name)")
        #else
          #set($attrName = "#attributeName($fk.fields.iterator().next().name)#pascal($fk.towards.name)")
        #end
    // forward foreign key attribute
    ${schemaInstance}.entity("#camel($fk.from.name)").instanceAttributes.#if($fk.nonNull)instanceAttribute#{else}nullableInstanceAttribute#end<$instanceClass>("$attrName", setOf(#fieldNames($fk.towards.primaryKey)), $instanceClass)
        #set($instanceClass = "${schemaClass}.#pascal($fk.from.name)")
        #if($kotlin.isUniqueFkDest($fk))
          #set($attrName = "#camel($fk.from.name)")
        #else
          #set($attrName = "#attributeName($fk.fields.iterator().next().name)#pascal($fk.from.name)")
        #end
    // reverse foreign key attribute
    ${schemaInstance}.entity("#camel($fk.towards.name)").instanceAttributes.bagAttribute<$instanceClass>("#plural($attrName)", setOf(#fieldNames($fk.fields)), $instanceClass)
      #end
    #end
  #end
#end
}
