package $package

import kotlinx.datetime.*
import com.republicate.kson.Json.Object

#set ($databaseClass = "#pascal($database.name)Database")

#foreach($schema in $model.schemas)
  #set($schemaClass = "${databaseClass}.#pascal($schema.name)Schema")
  #set($schemaInstance = "${databaseClass}.#camel($schema.name)")
  #foreach($item in $schema.items)
    #if($item.type.isComposite())
      #set($itemClass = "#pascal($item.name)")
        #if($item.type.parent)
          #set($parent = "#pascal($database.name)Database.#pascal($schema.name)Schema.#pascal($item.type.parent)")
        #else
          #set($parent = "Json.Object")
        #end
open class $itemClass: ${parent}() {
      #foreach ($field in $item.type.fields)
    val #camel($field.name): ${field.type}#if($field.nullable)?#end
        get() = get${field.type}("$field.name")#if(!$field.nullable)!!#end
      #end

    override fun putRawFields(from: Map<out String, Any?>) {
        super.putRawFields(from)
      #foreach ($field in $item.type.fields)
        if (from.containsKey("$field.name")) {
            putRawValue("$field.name", from["$field.name"])
        }
      #end
    }
}
    #end

    #if($item.receiver)
      #set($receiver = "${schemaClass}.#capitalize($item.receiver)")
    #else
      #set($receiver = $schemaClass)
    #end

    #set($cast = '')
    #set($generics = '')
    #if($item.transaction)
      #set($verb = 'attempt')
    #elseif($item.action)
      #set($verb = 'perform')
    #else
      #if($item.type.isComposite())
        #set($generics = "<#capitalize($item.name)#if($item.nullable)?#end>")
        #if(!$item.multiple)
          #set($cast=" as #capitalize($item.name)#if($item.nullable)?#end")
        #end
      #elseif($item.type.isEntity())
        #set($generics = "<${schemaClass}.#capitalize($item.type.name)#if($item.nullable)?#end>")
        #if(!$item.multiple)
##          #set($cast=" as #capitalize($item.name)#if($item.nullable)?#end")
        #end
      #else
        #set($generics = "<$item.type.name#if($item.nullable)?#end>")
      #end
      #if($item.multiple)
        #set($verb = 'query')
      #elseif($item.type.isComposite() && $item.type.parent || $item.type.isEntity())
        #set($verb = 'retrieve')
      #else
        #set($verb = 'eval')
      #end
    #end
// attribute ${item.receiver|$schema.name}.$item.name
suspend fun ${receiver}.`${item.name}`(#typedArguments($item.arguments)) = ${verb}${generics}("$item.name"#if($item.arguments), #values($item.arguments)#end)$cast

  #end
#end
