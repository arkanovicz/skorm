package $package

/**
 * This file has been generated by the skorm gradle plugin.
 */

import kotlinx.datetime.*
import com.republicate.skorm.*

#set ($databaseClass = "#pascal($database.name)Database")
#set ($databaseObject = "#camel($database.name)Database")
open class $databaseClass(): Database("$database.name")
object $databaseObject: $databaseClass() {
#foreach ($schema in $database.schemas.values())
  #set ($schemaClass = "#pascal($schema.name)Schema")
  #set ($schemaObject = "#camel($schema.name)")
    val $schemaObject = $schemaClass()
    class $schemaClass: Schema("$schema.name", $databaseObject) {
  #set ($enums = $kotlin.enums($schema))
  #foreach ($field in $enums)
        enum class #pascal($field.name)Enum {
    #foreach ($value in $kotlin.enumValues($field.type))
            $value#if ($foreach.hasNext),#end
    #end
        }
  #end
  #foreach ($table in $schema.tables.values())
    #set ($instanceClass = "#pascal($table.name)")
    #set ($instanceObject = "#camel($table.name)")
        class $instanceClass: Instance(Companion) {
            companion object: Entity("$instanceObject", $schemaObject) {
                override fun new(): $instanceClass = $instanceClass()
    #if ($table.primaryKey.size() > 0)
                override suspend fun fetch(vararg key: Any) = super.fetch(*key) as $instanceClass?
    #end
                override suspend operator fun iterator() = super.iterator() as Iterator<$instanceClass>
            }
    #foreach ($field in $table.fields.values())
## TODO output PKs first
      #set($pk = $field.primaryKey)
      #if($pk)
        #set($def = 'val')
      #else
        #set($def = 'var')
      #end
            $def #camel($field.name): #type($field)#if(!$field.nonNull)?#end
      #if($kotlin.isEnum($field.type))
                get() = #pascal($field.name)Enum.valueOf(getString("$field.name"))#if($field.nonNull)!!#end
        #if(!$pk)
                set(v) { put("$field.name", v?.toString() }
        #end
      #else
                get() = get#type($field)("$field.name")#if($field.nonNull)!!#end
        #if(!$pk)
                set(v) { put("$field.name", v) }
        #end
      #end
    #end
        }
  #end
    }
#end
}
