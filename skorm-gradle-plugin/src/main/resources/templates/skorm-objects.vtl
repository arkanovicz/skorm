package $package

/**
 * This file has been generated by the skorm gradle plugin.
 */

import kotlinx.datetime.*
import com.republicate.skorm.*

#set ($databaseClass = "#pascal($database.name)Database")
class $databaseClass(processor: Processor): Database("$database.name", processor) {
    companion object {
        lateinit var instance: Database
        private fun isInstantiated() = this::instance.isInitialized
#foreach ($schema in $database.schemas.values())
        val #camel($schema.name): #pascal($schema.name)Schema by lazy { #pascal($schema.name)Schema(instance) }
#end
    }
    init {
        if (isInstantiated()) throw RuntimeException("$databaseClass instance already crated")
        instance = this
    }
    override fun initialize() {
  #foreach ($schema in $database.schemas.values())
    #foreach ($table in $schema.tables.values())
        #pascal($schema.name)Schema.#pascal($table.name).initialize()
    #end
  #end
        super.initialize()
    }
#foreach ($schema in $database.schemas.values())
  #set ($schemaClass = "#pascal($schema.name)Schema")
  #set ($schemaObject = "#camel($schema.name)")
    class $schemaClass(db: Database): Schema("$schema.name", db) {
  #set ($enums = $kotlin.enums($schema))
  #foreach ($field in $enums)
        enum class #pascal($field.name)Enum {
    #foreach ($value in $kotlin.enumValues($field.type))
            $value#if ($foreach.hasNext),#end
    #end
        }
  #end
  #foreach ($table in $schema.tables.values())
    #set ($instanceClass = "#pascal($table.name)")
    #set ($instanceObject = "#camel($table.name)")
        open class $instanceClass: Instance(Companion) {
            companion object: Entity("$instanceObject", $schemaObject) {
                override fun new(): $instanceClass = $instanceClass()
    #if ($table.primaryKey.size() > 0)
                override suspend fun fetch(vararg key: Any) = super.fetch(*key) as $instanceClass?
    #end
                override suspend fun browse() = super.browse() as Sequence<$instanceClass>
                @Suppress("UNCHECKED_CAST")
                override suspend operator fun iterator() = super.iterator() as Iterator<$instanceClass>
                fun initialize() {
      #foreach ($field in $table.fields.values())
        #set($generated = "$field.type" == "serial")
                    addField(Field("#camel($field.name)", $field.primaryKey, $generated))
      #end
                }
            }
    #foreach ($field in $table.fields.values())
## TODO output PKs first
## TODO use delegates
      #set($pk = $field.primaryKey)
      #if($pk)
        #set($def = 'val')
      #else
        #set($def = 'var')
      #end
            $def #camel($field.name): #type($field)#if(!$field.nonNull)?#end
      #if($kotlin.isEnum($field.type))
                get() = getString("#camel($field.name)")#if($field.nonNull)!!#else?#end.let { #pascal($field.name)Enum.valueOf(it) }
        #if(!$pk)
                set(v) { put("#camel($field.name)", v#if(!$field.nonNull)?#end.toString()) }
        #end
      #else
                get() = #getter($field)("#camel($field.name)")#if($field.nonNull)!!#end
        #if(!$pk)
                set(v) { put("#camel($field.name)", v) }
        #end
      #end
    #end
        }
  #end
    }
#end
}
