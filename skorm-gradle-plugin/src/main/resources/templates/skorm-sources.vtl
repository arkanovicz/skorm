package $package

/**
 * This file has been generated by the skorm plugin. Do not modify it manually.
 */

import kotlinx.datetime.*
import com.republicate.skorm.*

#set ($databaseObject = "#camel($database.name)Database")
val $databaseObject = Database("$database.name")
#foreach ($schema in $database.schemas.values())

/////////////////////////
// schema $schema.name

//enums
  ## CB TODO handle redundant names in enum files: even if same enum, it cannot be declared twice
  #foreach ($table in $schema.tables.values())
    #foreach ($field in $table.fields.values())
      #if($kotlin.isEnum($field))
enum class #pascal($field.name)Enum {
        #foreach($value in $kotlin.enumValues($field.type))
    $value#if($foreach.hasNext),#end
        #end
}
      #end
    #end
  #end

  #set ($schemaObject = "#camel($schema.name)Schema")
val $schemaObject: Schema by lazy {
    ${databaseObject}.getSchema("$schema.name")
}
  #foreach ($table in $schema.tables.values())
    #set ($entityName = "#camel($table.name)Entity")
    #set ($instanceName = "#pascal($table.name)")

// table $table.name
val $entityName: Entity by lazy {
    ${schemaObject}.getEntity("$table.name").apply {
        factory = { #pascal($table.name)() }
    }
}
class $instanceName(): Instance($entityName) {
    companion object {
    #if ($table.primaryKey.size() == 1)
        #set($pkField = $table.primaryKey.iterator().next())
        #set($pkFieldName = "#camel($pkField.name)")
        operator fun get($pkFieldName: #type($pkField)) = ${entityName}.fetch($pkFieldName)
    #end
    #if ($table.primaryKey.size() > 0)
        fun fetch(#typedArgs($table.primaryKey)) = ${entityName}.fetch(#args($table.primaryKey))
    #end
        operator fun iterator(): Iterator<$instanceName> = object : Iterator<$instanceName> {
            private val iterator = ${entityName}.iterator()
            override fun next() = iterator.next() as $instanceName
            override fun hasNext() = iterator.hasNext()
        }
    }
    #foreach ($field in $table.fields.values())
    var #camel($field.name): #type($field)#if(!$field.nonNull)?#end // non-null = $field.nonNull
      #if($kotlin.isEnum($field.type))
        get() = #pascal($field.name)Enum.valueOf(getString("$field.name"))#if($field.nonNull)!!#end
        set(v: #type($field)#if(!$field.nonNull)?#end) { put("$field.name", v?.toString() }
      #else
        get() = get#type($field)("$field.name")#if($field.nonNull)!!#end
        set(v: #type($field)#if(!$field.nonNull)?#end) { put("$field.name", v) }
      #end
    #end
}
  #end
#end
